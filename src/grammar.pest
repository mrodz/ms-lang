alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
underscore = { "_" }

WHITESPACE = _{ " " }
COMMENT = _{ "//" }


ident = @{ !digit ~ (alpha | digit | underscore)+ }

string_literal_inner_d = { ((!"\"") ~ ANY)* }
string_literal_double = @{ "\"" ~ string_literal_inner_d ~ "\"" }
string_literal_inner_s = { ((!"'") ~ ANY)* }
string_literal_single = @{ "'" ~ string_literal_inner_s ~ "'" }

function_call = { ident ~ "(" ~ (function_arg) ~ ("," ~ function_arg)* ~ ")" }
function_arg = { val | ident }

function_arguments = { (ident ~ ("," ~ ident)*)? }

function = { "func" ~ ident ~ "(" ~ function_arguments ~ ")" ~ "{" ~ function_body ~ "}"}

function_body = {
	((tabs ~ (statement)? ~ NEWLINE)*)
}

statement = { tabs ~ (variable | function) }

b_true = { "true" }
b_false = { "false" }
boolean = { b_true | b_false }

number = { ASCII_DIGIT{1,} ~ ("." ~ ASCII_DIGIT{1,})? }

// addition = { "+" }
// subtraction = { "-" }
// multiplication = { "*" }
// division = { "/" }
// modulo = { "%" }

// math_op = { addition | subtraction | multiplication | division | modulo }

// operation = { math_op ~ number }

// res_math = { (number | res_math) ~ math_op ~ (number | res_math) }
// math = { number | (res_math)* }

group   =  { prefix* ~ primary ~ (infix ~ prefix* ~ primary )* }
infix   =  { "+" | "-" | "*" | "/" | "%" }
prefix  =  { "-" | "!" }
primary = _{ number | "(" ~ group ~ ")" }
  // num   = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }

val = { primary | boolean | (string_literal_double | string_literal_single) | function_call | ident }

variable = { "var" ~ ident ~ "=" ~ val ~ ";" }

declarations = { variable | function }

tabs = _{ ("\t"*) }

file = {
    SOI ~
    ((tabs ~ (declarations)? ~ NEWLINE)*) ~
    EOI
}