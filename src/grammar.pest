// START Constants
alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
quote_d = { "\"" }
quote_s = { "'" }
underscore = { "_" }

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "//" }

keywords = _{ "is" | "native" | "func" | "var" | "return" | "true" | "false" | "if" | "else" }
// END Constants

// This is a any valid identity.
// - Function names
// - Variable names
ident = @{ !keywords ~ (!digit ~ (alpha | digit | underscore)+) }

// START Strings
string_literal_inner_d = { ((!quote_d) ~ ANY)* }
string_literal_double = @{ quote_d ~ string_literal_inner_d ~ quote_d }
string_literal_inner_s = { ((!quote_s) ~ ANY)* }
string_literal_single = @{ quote_s ~ string_literal_inner_s ~ quote_s }
// END Strings

// START Functions
function_call = { ident ~ "(" ~ ((function_arg) ~ ("," ~ function_arg)*)? ~ ")"}
function_arg = { val }

function_arguments = { (ident ~ ("," ~ ident)*)? }

function = { "func" ~ ident ~ "(" ~ function_arguments ~ ")" ~ "{" ~ function_body ~ "}"}

return_statement = { "return" ~ val? ~ ";" }

function_body = {
	(((statement))*)
}
// END Functions

// START Native statement
native_capture = { (!"\"" ~ ANY)* }
native = { "native" ~ "\"" ~ native_capture ~ "\"" ~ ";" }
// END Native statement

statement = { 
    (
        (
            variable | variable_reassign | shorthand_assign | return_statement
        ) 
        | 
        (
            function_call ~ ";"
        ) 
        | native | if_statement
    ) 
}

// START If statement
b_true = _{ "true" }
b_false = _{ "false" }
boolean = { (b_true | b_false) }

if_statement = { "if" ~ (function_call | boolean | ident) ~ "{" ~ function_body ~ "}" ~ ("else" ~ (if_statement | ("{" ~ function_body ~ "}")))? }
// END If statement

// START Math
number = { prefix? ~ (ASCII_DIGIT{1,} ~ ("." ~ ASCII_DIGIT{1,})?) }

// Simple equation: 1 + 2 * 10 / 5
inline_math = { ((number) | ident) ~ (infix ~ ((number) | ident)){1,} }

group   =  { prefix* ~ primary ~ (infix ~ prefix* ~ primary )* }
infix   =  { "+" | "-" | "*" | "/" | "%" }
prefix  =  { "-" }
// prefix_n = _{ "-" }
primary = _{ ((number) | ident) | "(" ~ group ~ ")" }
// END Math

array = { "[" ~ ((val ~ ",")* ~ val)? ~ "]" }

array_index_num = { ASCII_DIGIT{1,} }

array_index = { ident ~ index+ }
index = { "[" ~ (array_index_num | val) ~ "]" }

val = { ((array_index) | array) | function_call | (inline_math) | (primary) | (string_literal_double | string_literal_single) | boolean | ident }

variable = { "var" ~ ident ~ "=" ~ val ~ ";" }
variable_reassign = { ident ~ "=" ~ val ~ ";" }
shorthand_assign = { ident ~ (add_assign | sub_assign | div_assign | mul_assign | mod_assign) ~ val ~ ";" }

add_assign = { "+=" }
sub_assign = { "-=" }
div_assign = { "/=" }
mul_assign = { "*=" }
mod_assign = { "%=" }

declarations = { variable | function }

// tabs = _{ ("\t"*) }

file = {
    SOI ~
    (((declarations))*) ~
    EOI
}