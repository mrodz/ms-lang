// START Constants
alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
quote_d = { "\"" }
quote_s = { "'" }
underscore = { "_" }

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "//" }
// END Constants

// This is a any valid identity.
// - Function names
// - Variable names
ident = @{ !digit ~ (alpha | digit | underscore)+ }

// START Strings
string_literal_inner_d = { ((!quote_d) ~ ANY)* }
string_literal_double = @{ quote_d ~ string_literal_inner_d ~ quote_d }
string_literal_inner_s = { ((!quote_s) ~ ANY)* }
string_literal_single = @{ quote_s ~ string_literal_inner_s ~ quote_s }
// END Strings

// START Functions
function_call = { ident ~ "(" ~ ((function_arg) ~ ("," ~ function_arg)*)? ~ ")"}
function_arg = { val }

function_arguments = { (ident ~ ("," ~ ident)*)? }

function = { "func" ~ ident ~ "(" ~ function_arguments ~ ")" ~ "{" ~ function_body ~ "}"}

function_body = {
	(((statement))*)
}
// END Functions

// START Native statement
native_capture = { (!"\"" ~ ANY)* }
native = { "native" ~ "\"" ~ native_capture ~ "\"" ~ ";" }
// END Native statement

statement = { 
    (
        (
            variable | variable_reassign | shorthand_assign
        ) 
        | 
        (
            function_call ~ ";"
        ) 
        | native | if_statement
    ) 
}

// START If statement
b_true = { "true" }
b_false = { "false" }
boolean = { b_true | b_false }

boolean_infix = { "&&" | "||" | "^" }
boolean_prefix = { "!" }
boolean_group = { 
    boolean_prefix* ~ boolean_primary ~ (
        boolean_infix ~ boolean_prefix* ~ boolean_primary
    )* 
}
boolean_primary = _{ 
    boolean_prefix* ~ 
    (
        (boolean)
        | ident
    ) 
    | "(" ~ boolean_group ~ ")" 
}
inline_boolean = { 
    (
        boolean_prefix* ~ (
            (boolean) | ident
        )
    ) ~ (
        boolean_infix ~ boolean_prefix* ~ (
            (boolean) | ident
        )
    )+ 
}

block = { "{" ~ statement* ~ "}" }

if_statement = { "if" ~ (ident | inline_boolean | boolean_primary) ~ block ~ ("else" ~ (if_statement | block))? }
// END If statement

// START Math
number = { prefix? ~ (ASCII_DIGIT{1,} ~ ("." ~ ASCII_DIGIT{1,})?) }

// Simple equation: 1 + 2 * 10 / 5
inline_math = { ((number) | ident) ~ (infix ~ ((number) | ident)){1,} }

group   =  { prefix* ~ primary ~ (infix ~ prefix* ~ primary )* }
infix   =  { "+" | "-" | "*" | "/" | "%" }
prefix  =  { "-" }
// prefix_n = _{ "-" }
primary = _{ ((number) | ident) | "(" ~ group ~ ")" }
// END Math

array = { "[" ~ ((val ~ ",")* ~ val)? ~ "]" }

array_index_num = { ASCII_DIGIT{1,} }

array_index = { ident ~ index+ }
index = { "[" ~ (array_index_num | val) ~ "]" }

val = { ((array_index) | array) | (inline_boolean | inline_math) | (boolean_primary | primary) | (string_literal_double | string_literal_single) | function_call | ident }

variable = { "var" ~ ident ~ "=" ~ val ~ ";" }
variable_reassign = { ident ~ "=" ~ val ~ ";" }
shorthand_assign = { ident ~ (add_assign | sub_assign | div_assign | mul_assign | mod_assign) ~ val ~ ";" }

add_assign = { "+=" }
sub_assign = { "-=" }
div_assign = { "/=" }
mul_assign = { "*=" }
mod_assign = { "%=" }

declarations = { variable | function }

// tabs = _{ ("\t"*) }

file = {
    SOI ~
    (((declarations))*) ~
    EOI
}